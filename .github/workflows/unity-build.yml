name: Unity Windows Build with Single EXE and S3 Upload

on:
  push:
    branches:
      - main
  workflow_dispatch: # This enables manual triggering of the workflow

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Assign Unity Pro License
        run: |
          echo "Logging into Unity Admin..."
          $headers = @{
            "Content-Type" = "application/json"
          }
          $body = @{
            "username" = "${{ secrets.UNITY_EMAIL }}"
            "password" = "${{ secrets.UNITY_PASSWORD }}"
            "grant_type" = "password"
          } | ConvertTo-Json
          try {
            $response = Invoke-RestMethod -Uri "https://id.unity.com/api/v1/oauth/token" -Method Post -Headers $headers -Body $body
            Write-Host "Response: $($response | ConvertTo-Json)"
          } catch {
            Write-Host "Error: $($_.Exception.Message)"
            exit 1
          }

          if (-not $response) { 
            Write-Host "Failed to login to Unity Admin" 
            exit 1
          }

          echo "Successfully logged in, assigning Unity Pro License..."
          $headers = @{
            "Authorization" = "Bearer $($response.access_token)"
            "Content-Type" = "application/json"
          }
          $body = @{
            "organizationId" = "${{ secrets.UNITY_ORG_ID }}"
          } | ConvertTo-Json

          try {
            $assignResponse = Invoke-RestMethod -Uri "https://services.unity.com/api/users/${{ secrets.UNITY_USER_EMAIL }}/assign-license" -Method Post -Headers $headers -Body $body
            Write-Host "License Assignment Response: $($assignResponse | ConvertTo-Json)"
          } catch {
            Write-Host "Error assigning license: $($_.Exception.Message)"
            exit 1
          }
        shell: pwsh


      - name: Activate Unity License
        run: |
          echo "Activating Unity license..."
          Unity -batchmode -quit -logfile ./UnityLicense.log -serial $(cat unity_serial.txt)
        shell: cmd

      - name: Build Unity Project
        run: |
          echo "Starting Unity build..."
          Unity -batchmode -quit -logfile ./UnityBuild.log -projectPath . -buildWindows64Player "Build/Windows/MyApp.exe"
        shell: cmd

      - name: Convert Build to Single EXE using Inno Setup
        run: |
          echo "[Setup]" > MyApp.iss
          echo "AppName=MyUnityApp" >> MyApp.iss
          echo "AppVersion=1.0" >> MyApp.iss
          echo "DefaultDirName={pf}\MyUnityApp" >> MyApp.iss
          echo "OutputDir=Build/Windows" >> MyApp.iss
          echo "OutputBaseFilename=MyUnityApp" >> MyApp.iss
          echo "SetupIconFile=Build/Windows/MyApp.ico" >> MyApp.iss
          echo "[Files]" >> MyApp.iss
          echo "Source: \"Build/Windows/*\"; DestDir: \"{app}\"; Flags: ignoreversion" >> MyApp.iss
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" MyApp.iss
        shell: cmd

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "Build/Windows"
          DEST_DIR: ""  # Upload directly to the root of the bucket

      - name: Revoke Unity Pro License
        run: |
          echo "Revoking Unity Pro License from ${{ secrets.UNITY_USER_EMAIL }}..."
          $headers = @{
            "Authorization" = "Bearer $($response.access_token)"
          }
          Invoke-RestMethod -Uri "https://services.unity.com/api/users/${{ secrets.UNITY_USER_EMAIL }}/revoke-license" -Method Post -Headers $headers
        shell: pwsh
